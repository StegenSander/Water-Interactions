// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BakeCollisionMap

//Functions
uint Get3DBufferCell(uint x, uint y, uint z);
uint Get3DBufferCell(int3 pos);
float3 ConvertHeightMapPosToGridSpace(float x, float height, float z);
float SampleGridValue(float3 gridSpacePos);

RWStructuredBuffer<float> CollisionGrid;

Texture2D<float4> HeightMap;
RWTexture2D<float> CollisionMap;

float3 AmountOfGridCells;
float3 GridPos; //minX,minY,minZ
float3 GridSize; //sizeX,sizeY,sizeZ
float HeightScalar;
float DefaultDensityValue;
int TextureSize;

[numthreads(8,8,1)]
void BakeCollisionMap (uint3 id : SV_DispatchThreadID)
{
    float height = HeightMap[id.xy].b;
    float3 gridSpacePos = ConvertHeightMapPosToGridSpace(id.x, height, id.y);
    
    
    CollisionMap[id.xy] = SampleGridValue(gridSpacePos);
}

float3 ConvertHeightMapPosToGridSpace(float x, float height, float z)
{
    float3 normalisedTextureCoord = float3(x / float(TextureSize), height, z / float(TextureSize));
    return normalisedTextureCoord * AmountOfGridCells;
}

float SampleGridValue(float3 gridSpacePos)
{
    int3 gridSpacePosInt = (int3) (gridSpacePos);
    float3 perc = gridSpacePos - gridSpacePosInt;
    
    float result = 0;
    result += (1 - perc.x)  * (1 - perc.y)  * (1 - perc.z)  * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(0, 0, 0))];
    result += (perc.x)      * (1 - perc.y)  * (1 - perc.z)  * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(1, 0, 0))];
    result += (1 - perc.x)  * (perc.y)      * (1 - perc.z)  * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(0, 1, 0))];
    result += (perc.x)       * (perc.y)     * (1 - perc.z)  * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(1, 1, 0))];
    
    result += (1 - perc.x)  * (1 - perc.y)  * (perc.z)      * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(0, 0, 1))];
    result += (perc.x)      * (1 - perc.y)  * (perc.z)      * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(1, 0, 1))];
    result += (1 - perc.x)  * (perc.y)      * (perc.z)      * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(0, 1, 1))];
    result += (perc.x)      * (perc.y)      * (perc.z)      * CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(1, 1, 1))];
    
    //return CollisionGrid[Get3DBufferCell(gridSpacePosInt + int3(0, 0, 0))];
    return result;
}

uint Get3DBufferCell(uint x, uint y, uint z)
{
    return (x * AmountOfGridCells.y * AmountOfGridCells.z + y * AmountOfGridCells.z + z);
}
uint Get3DBufferCell(int3 pos)
{
    return (pos.x * (AmountOfGridCells.y + 1) * (AmountOfGridCells.z + 1) + pos.y * (AmountOfGridCells.z + 1) + pos.z);
}
