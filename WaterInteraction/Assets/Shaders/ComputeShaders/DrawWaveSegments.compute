// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DrawWaveSegments

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct WaveSegment
{
    float2 origin;
    
    float strenght;
    float strengthDecay;
    
    float radius;
    float speed;
    
    float waveThickness;
    
    float segmentStartAngle;
    float segmentAngleSize;
    
    int isSegmented;
};


RWStructuredBuffer<WaveSegment> WaveSegments;
int WaveSegmentCount;

int TargetTextureSize;
RWTexture2D<float4> TargetTexture;

int CollisionTextureSize;
Texture2D<float4> CollisionTexture;

//Functions
float4 DrawColorForWave(WaveSegment wave, int2 id);
float4 ApplyCollisionTexture(float4 color, uint2 pos);

[numthreads(8,8,1)]
void DrawWaveSegments (uint3 id : SV_DispatchThreadID)
{
    float4 totalValue = 0.f;
    
    //Visualize collision
    float textureScalar = (CollisionTextureSize / (float) TargetTextureSize);
    uint2 posOnCollisionTexture = id.xy * textureScalar;
    totalValue.g = CollisionTexture[posOnCollisionTexture].g;
    
    //Visualise Waves
    for (int i = 0; i < WaveSegmentCount; i++)
    {
        totalValue += DrawColorForWave(WaveSegments[i], id.xy);
    }
    
    //if (id.x + id.y == 0)
    //{
    //    for (int i = 0; i < WaveSegmentCount; i++)
    //    {
    //        WaveSegments[i].segmentAngleSize = 3.14f;
    //    }
    //}
    
    TargetTexture[id.xy] = totalValue;
}

float4 DrawColorForWave(WaveSegment wave, int2 pos)
{
    float2 actualOrigin = wave.origin * TargetTextureSize;
    float actualRadius = wave.radius * TargetTextureSize;
    float actualWaveThickness = wave.waveThickness * TargetTextureSize;
    
    float2 posDiff = pos - actualOrigin;
    float sqrDistance = posDiff.x * posDiff.x + posDiff.y * posDiff.y;
    float actualDistance = sqrt(sqrDistance);
    
    //Calculate result based on distance to the top of the line
    float4 result = (float4)0;
    result.r = (actualWaveThickness - abs(actualDistance - actualRadius)) / actualWaveThickness;
    result.r *= wave.strenght;
    
    //To segment
    float angle = atan2(posDiff.y, posDiff.x);

    if (angle < 0)
        angle = 6.28 + angle;
    if ((angle < wave.segmentStartAngle || angle > wave.segmentStartAngle + wave.segmentAngleSize)
        && (angle - 6.28f < wave.segmentStartAngle || angle - 6.28f > wave.segmentStartAngle + wave.segmentAngleSize))
        result.r = 0;
    
    result = ApplyCollisionTexture(result, pos);
    
    return max(0, result );
}

float4 ApplyCollisionTexture(float4 color, uint2 pos)
{
    float textureScalar = (CollisionTextureSize / (float) TargetTextureSize);
    uint2 posOnCollisionTexture = pos * textureScalar;
    color.r = min(1.f - CollisionTexture[posOnCollisionTexture].g, color.r);
    return color;
}

